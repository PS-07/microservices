TICKETING APP

Resources
    User -   { email, password }
    Ticket - { title, price, userId, orderId }
    Order -  { userId, status, ticketId, expiresAt }
    Charge - { orderId, status, amount, stripeId, stripeRefundId }

Services
    auth - everything related to user signup/signin/signout
    tickets - ticket creation/editing
    orders - order creation/editing
    expiration - watches for orders to be created, cancels them after 15 min
    payments - handles payments, cancels order if payment fails, completes if succeeds

Design
    React Client App - Next JS
    Common - Library for common code/middlewares for services
    Services - Node servers with persistent database (MongoDb/Redis)
    NATS Streaming Server - Event bus

Kubernetes
    dir - infra/k8s
    use - the deployments: {service}-depl.yaml uses a image to create pods (containers) that run the service;
          also we create a corresponding ClusterIP service in {service}-depl.yaml;
          a ClusterIP service allows communication to the service from anything else running inside our cluster

Skaffold
    dir - ticketing/skaffold.yaml
    use - it is a config file, if a change is made to:
              - any .yaml file in infra/k8s dir, it will apply it to the cluster
              - any change in code in each service dir (auth/tickets/orders/expiration/payments),
                it will sync all the files in there with appropriate container in the cluster
    run - skaffold dev (in ticketing dir)

Ingress-Nginx
    To access a running server (any pod in our cluster), we can:
        1. set up NodePort service
        2. Ingress service - it has routing rules tied to Nginx
    dir - infra/k8s/ingress-srv.yaml
    use - anytime a request comes in to the cluster, it will be handled by the Ingress service and
          it will be routed off to the appropriate service within the cluster  

Host file edit and security warning
    dir - C:\Windows\System32\drivers\etc\hosts
    Edit the 'hosts' file by adding a line at the bottom:
        {IP} ticketing.dev
    [get the {IP} by running minikube ip command] 

    goto http://ticketing.dev
    when prompted with the 'Your connection is not private' error,
    click anywhere on the page and type 'thisisunsafe' 

Auth Service
    Structure
            Route              Method           Body                   Purpose
        /api/users/signup         POST     { email, password }    Sign up for an account
        /api/users/signin         POST     { email, password }    Sign in to an existing account  
        /api/users/signout        POST             {}             Sign out
        /api/users/currentuser    GET             ----            Return info about user

    Initialization
        npm init -y
        npm install typescript ts-node-dev express @types/express
        tsc --init
        In 'package.json' file, edit "scripts" tag to look like:
            "scripts": {
                "start": "ts-node-dev --poll src/index.ts"
            }
        npm install express-validator
        npm install express-async-errors
        npm install mongoose
        npm install @types/mongoose
        npm install cookie-session @types/cookie-session
        npm install jsonwebtoken @types/jsonwebtoken
        
        Goto ticketing.dev/api/users/currentuser
        To remove 'Your connection is not private' error,
        click anywhere on the page and type 'thisisunsafe'
        
        kubectl create secret generic jwt-secret --from-literal=JWT_KEY=asdf (in ticketing)